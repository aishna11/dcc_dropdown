{
  "src/lib/components/DccDropdown.react.js": {
    "description": "ExampleComponent is an example component.\r\nIt takes a property, `label`, and\r\ndisplays it.\r\nIt renders an input with the property `value`\r\nwhich is editable by the user.",
    "displayName": "DccDropdown",
    "methods": [],
    "props": {
      "options": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              },
              "description": "Array of options where the label and the value are the same thing - [string|number|bool]"
            },
            {
              "name": "object",
              "description": "Simpler `options` representation in dictionary format. The order is not guaranteed.\r\n{`value1`: `label1`, `value2`: `label2`, ... }\r\nwhich is equal to\r\n[{label: `label1`, value: `value1`}, {label: `label2`, value: `value2`}, ...]"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "exact",
                "value": {
                  "label": {
                    "name": "union",
                    "value": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "number"
                      }
                    ],
                    "description": "The option's label",
                    "required": true
                  },
                  "value": {
                    "name": "union",
                    "value": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "number"
                      },
                      {
                        "name": "bool"
                      }
                    ],
                    "description": "The value of the option. This value\r\ncorresponds to the items specified in the\r\n`value` property.",
                    "required": true
                  },
                  "disabled": {
                    "name": "bool",
                    "description": "If true, this option is disabled and cannot be selected.",
                    "required": false
                  },
                  "title": {
                    "name": "string",
                    "description": "The HTML 'title' attribute for the option. Allows for\r\ninformation on hover. For more information on this attribute,\r\nsee https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title",
                    "required": false
                  }
                }
              },
              "description": "An array of options {label: [string|number], value: [string|number]},\r\nan optional disabled field can be used for each option"
            }
          ]
        },
        "required": false,
        "description": "An array of options {label: [string|number], value: [string|number]},\r\nan optional disabled field can be used for each option"
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "bool"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              }
            }
          ]
        },
        "required": false,
        "description": "The value of the input. If `multi` is false (the default)\r\nthen value is just a string that corresponds to the values\r\nprovided in the `options` property. If `multi` is true, then\r\nmultiple values can be selected at once, and `value` is an\r\narray of items with values corresponding to those in the\r\n`options` prop."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\r\nin callbacks. The ID needs to be unique across all of the\r\ncomponents in an app."
      },
      "optionHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "height of each option. Can be increased when label lengths would wrap around",
        "defaultValue": {
          "value": "35",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "className of the dropdown element"
      },
      "clearable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether or not the dropdown is \"clearable\", that is, whether or\r\nnot a small \"x\" appears on the right of the dropdown that removes\r\nthe selected value.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "closeMenuOnSelect": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether or not the dropdown is \"clearable\", that is, whether or\r\nnot a small \"x\" appears on the right of the dropdown that removes\r\nthe selected value.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, this dropdown is disabled and the selection cannot be changed.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "multi": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the user can select multiple values",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The grey, default text shown when no option is selected"
      },
      "searchable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to enable the searching feature or not",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "search_value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value typed in the DropDown for searching."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the input changes"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\r\nthe component - or the page - is refreshed. If `persisted` is truthy and\r\nhasn't changed from its previous value, a `value` that the user has\r\nchanged while using the app will keep that change, as long as\r\nthe new `value` also matches what was given originally.\r\nUsed in conjunction with `persistence_type`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "'value'",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\r\ncomponent or the page. Since only `value` is allowed this prop can\r\nnormally be ignored.",
        "defaultValue": {
          "value": "['value']",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'local'",
              "computed": false
            },
            {
              "value": "'session'",
              "computed": false
            },
            {
              "value": "'memory'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\r\nmemory: only kept in memory, reset on page refresh.\r\nlocal: window.localStorage, data is kept after the browser quit.\r\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "'local'",
          "computed": false
        }
      }
    }
  }
}